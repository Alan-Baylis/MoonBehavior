{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nMoonBehavior is a simple but powerfult \nBehaviorTree\n System \nfor \nUnity3d\n game engine. \n\n\nFor more info about MoonBehavior Please visit the Github Repository \nHere\n.\n\n\nGetting Started\n\n\nThe Getting Started videos will be aviable soon via Youtube.",
            "title": "Getting Started"
        },
        {
            "location": "/#welcome",
            "text": "MoonBehavior is a simple but powerfult  BehaviorTree  System \nfor  Unity3d  game engine.   For more info about MoonBehavior Please visit the Github Repository  Here .",
            "title": "Welcome"
        },
        {
            "location": "/#getting-started",
            "text": "The Getting Started videos will be aviable soon via Youtube.",
            "title": "Getting Started"
        },
        {
            "location": "/node-types/",
            "text": "MoonBehavior Comes with a lot of default build-in nodes that you can use.\n\n\nIn this page will explain the functionality of basic nodes.\n\n\nSequencer\n\n\n\n\nSequencer like his name says executes sequencially every task by order from minor to mayor.\n\n\nReturns SUCCESS when all tasks are successed, FAIL when any task fails, otherwise it will return RUNNING.\n\n\nIt's good for sequencial events.\n\n\n\n\nSelector\n\n\n\n\nSelector Executes task sequencially (like sequencer) but it will not pass to the next task until the current task fails.\n\n\nReturns SUCCESS if the current task are successed , RUNNING if the current task are running , and FAILURE if all the childs tasks fails or it has no childs.\n\n\nOptions\n\n\n\n\nRandomize:\n If enabled it will sort and executes the childs Ramdomly.\n\n\n\n\nIt's good for IF-ELSE Sequences\n\n\n\n\nRandom Selector\n\n\n\n\nRandom selector\n\n\nWorks like selector but select it's childs based on the priority of every child node, mayor priority means more selection probability. \n\n\nRepeater\n\n\n\n\nRepeats a child Task every tick.\n\n\nOptions\n\n\n\n\nRepeat until:\n Repeat mode: SUCCESS; Repeats until the child node returns Success, FAILURE; Repeats until the child node retunrs Failure, \nFOREVER; Repeats forever.\n\n\n\n\nReturns Success When the repeat condition fails, otherwise returns running\n\n\nit's good for continuos executions.\n\n\n\n\nIterator\n\n\n\n\nRepeats a child task every tick (like Repeater) but with a limited repeat count.\n\n\nOptions\n\n\n\n\nRepeat count:\n Maximun child repetitions.\n\n\n\n\nReturns SUCCESS when repetitions are finished, otherwise returns RUNNING.\n\n\nParallel\n\n\n\n\nExecutes all childs simultaneously every tick\n\n\nReturns RUNNING.\n\n\nInverter\n\n\n\n\nLike ! Operator Returns the inverter the result of it's child Task.\n\n\nSUCCESS becomes FAILURE\n\n\nFAILURE becomes SUCCESS.",
            "title": "Node Types"
        },
        {
            "location": "/node-types/#sequencer",
            "text": "Sequencer like his name says executes sequencially every task by order from minor to mayor.  Returns SUCCESS when all tasks are successed, FAIL when any task fails, otherwise it will return RUNNING.  It's good for sequencial events.",
            "title": "Sequencer"
        },
        {
            "location": "/node-types/#selector",
            "text": "Selector Executes task sequencially (like sequencer) but it will not pass to the next task until the current task fails.  Returns SUCCESS if the current task are successed , RUNNING if the current task are running , and FAILURE if all the childs tasks fails or it has no childs.  Options   Randomize:  If enabled it will sort and executes the childs Ramdomly.   It's good for IF-ELSE Sequences",
            "title": "Selector"
        },
        {
            "location": "/node-types/#random-selector",
            "text": "Random selector  Works like selector but select it's childs based on the priority of every child node, mayor priority means more selection probability.",
            "title": "Random Selector"
        },
        {
            "location": "/node-types/#repeater",
            "text": "Repeats a child Task every tick.  Options   Repeat until:  Repeat mode: SUCCESS; Repeats until the child node returns Success, FAILURE; Repeats until the child node retunrs Failure, \nFOREVER; Repeats forever.   Returns Success When the repeat condition fails, otherwise returns running  it's good for continuos executions.",
            "title": "Repeater"
        },
        {
            "location": "/node-types/#iterator",
            "text": "Repeats a child task every tick (like Repeater) but with a limited repeat count.  Options   Repeat count:  Maximun child repetitions.   Returns SUCCESS when repetitions are finished, otherwise returns RUNNING.",
            "title": "Iterator"
        },
        {
            "location": "/node-types/#parallel",
            "text": "Executes all childs simultaneously every tick  Returns RUNNING.",
            "title": "Parallel"
        },
        {
            "location": "/node-types/#inverter",
            "text": "Like ! Operator Returns the inverter the result of it's child Task.  SUCCESS becomes FAILURE  FAILURE becomes SUCCESS.",
            "title": "Inverter"
        },
        {
            "location": "/using-memory/",
            "text": "AI memory allows you to store some information between the graph nodes and The AI agent.\n\n\nThe AI memory stores every element as object type that means that you can store on the memory almost every data type.\n\n\nAdding elements\n\n\nAdd element to memory list:\n\n\n\n\nModify the content: \n\n\n\n\nUsing code:\n\n\nusing MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.SetItem(\"Label\" , value);\n    }\n}\n\n\n\n\nRemoving elements\n\n\nTo removing elements in the inspector it's just clicking on the (-) buttun and it will remove the selected item.\n\n\nUsing Code:\n\n\nusing MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.Remove(\"Label\");\n    }\n}\n\n\n\n\nGet values\n\n\nSimple item:\n\n\nusing MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        float a =  ai.Memory.GetValue<float>(\"Label\");\n    }\n}\n\n\n\n\nMemoryItem:\n\n\nAllows support of constant and memory-based values of different data types (NOTE: it doesn't support array.) that gets value automatically.\n\n\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n\n    public MemoryItem Item = new MemoryItem(MemoryItem.ItemType.FLOAT);\n\n    public MoonAI ai; \n\n    private void Start()\n    {\n        float b = Item.GetValue<float>(ai);\n    }\n}\n\n\n\n\nClear Memory\n\n\nTo clear the memory Simply call The \nClear()\n Method\n\n\n\n\nIt will kill all the AI memory, so be careful about destroying the memory data.\n\n\n\n\nusing UnityEngine;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai; \n\n    private void Start()\n    {\n        ai.Memory.Clear();\n    }\n}\n\n\n\n\nSave & Load\n\n\nSaving and loading data allows you to keep in HDD / RAM the AI's Memory.\n\n\nIt will return an byte array and you can save it later to a file and loaing it again.\n\n\n\n\nNote:\n the serialization and des-serialization can be \nslow\n because it encrypts and decrypts the information to return safe data.\n\n\nDoesn't support unity-derived (UnityEngine.Object) data types because it's not safe at serialization.\n\n\n\n\nSaving\n\n\nTo save from memory call the method: Save(string password) \n\n\n\n\nPassword: password use as key to encrypt the Memory. You must keep it, it will be used on loading. \n\n\n\n\nExample saving data:\n\n\n\nusing UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\nusing System.IO;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void  Start()\n    {\n        // Push some data to the AI memory\n        for (int i = 0; i < 10; i++)\n        {\n            ai.Memory.SetValue(i.ToString(), Random.Range(-1000, 1000));\n        }\n        // Saves the data with the password: 123\n        byte[] dataf = ai.Memory.Save(\"123\");\n        // Saves the data to the \"Assets\" folder of your proyect just as example saving to file.\n        File.WriteAllBytes(Application.dataPath + \"/test.txt\", dataf); \n    }\n}\n\n\n\n\nLoading\n\n\nTo load from memory call the method: Load(byte[] Data , string password)\n\n\n\n\nData: byte array of the previusly saved data.\n\n\nPassword: Password linked with the saved data.\n\n\n\n\nExample loading data:\n\n\nusing UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n\n    public TextAsset preload;\n\n    private void  Start()\n    {\n        if (preload != null)\n        {\n            ai.Memory.Load(preload.bytes, \"123\");\n        }\n    }\n}",
            "title": "Using Memory"
        },
        {
            "location": "/using-memory/#adding-elements",
            "text": "Add element to memory list:   Modify the content:    Using code:  using MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.SetItem(\"Label\" , value);\n    }\n}",
            "title": "Adding elements"
        },
        {
            "location": "/using-memory/#removing-elements",
            "text": "To removing elements in the inspector it's just clicking on the (-) buttun and it will remove the selected item.  Using Code:  using MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.Remove(\"Label\");\n    }\n}",
            "title": "Removing elements"
        },
        {
            "location": "/using-memory/#get-values",
            "text": "Simple item:  using MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        float a =  ai.Memory.GetValue<float>(\"Label\");\n    }\n}  MemoryItem:  Allows support of constant and memory-based values of different data types (NOTE: it doesn't support array.) that gets value automatically.  using UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n\n    public MemoryItem Item = new MemoryItem(MemoryItem.ItemType.FLOAT);\n\n    public MoonAI ai; \n\n    private void Start()\n    {\n        float b = Item.GetValue<float>(ai);\n    }\n}",
            "title": "Get values"
        },
        {
            "location": "/using-memory/#clear-memory",
            "text": "To clear the memory Simply call The  Clear()  Method   It will kill all the AI memory, so be careful about destroying the memory data.   using UnityEngine;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai; \n\n    private void Start()\n    {\n        ai.Memory.Clear();\n    }\n}",
            "title": "Clear Memory"
        },
        {
            "location": "/using-memory/#save-load",
            "text": "Saving and loading data allows you to keep in HDD / RAM the AI's Memory.  It will return an byte array and you can save it later to a file and loaing it again.   Note:  the serialization and des-serialization can be  slow  because it encrypts and decrypts the information to return safe data.  Doesn't support unity-derived (UnityEngine.Object) data types because it's not safe at serialization.   Saving  To save from memory call the method: Save(string password)    Password: password use as key to encrypt the Memory. You must keep it, it will be used on loading.    Example saving data:  \nusing UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\nusing System.IO;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void  Start()\n    {\n        // Push some data to the AI memory\n        for (int i = 0; i < 10; i++)\n        {\n            ai.Memory.SetValue(i.ToString(), Random.Range(-1000, 1000));\n        }\n        // Saves the data with the password: 123\n        byte[] dataf = ai.Memory.Save(\"123\");\n        // Saves the data to the \"Assets\" folder of your proyect just as example saving to file.\n        File.WriteAllBytes(Application.dataPath + \"/test.txt\", dataf); \n    }\n}  Loading  To load from memory call the method: Load(byte[] Data , string password)   Data: byte array of the previusly saved data.  Password: Password linked with the saved data.   Example loading data:  using UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n\n    public TextAsset preload;\n\n    private void  Start()\n    {\n        if (preload != null)\n        {\n            ai.Memory.Load(preload.bytes, \"123\");\n        }\n    }\n}",
            "title": "Save &amp; Load"
        }
    ]
}