{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nMoonBehavior is a simple but powerfult \nBehaviorTree\n System \nfor \nUnity3d\n game engine.\n\n\nit enables you to create:\n\n\n\n\nbetter AI's in less time.\n\n\nReuse and secured logic. \n\n\nAnd much more. \n\n\n\n\nDownload\n\n\n\n\n\n\n\n\n\n\nFeature\n\n\nFree\n\n\nPaid\n\n\n\n\n\n\n\n\n\n\nAll plataforms\n\n\nDesktop only\n\n\nYes\n\n\n\n\n\n\nRealtime debugger\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nSource code\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nCommercial use\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nDownload\n\n\nDownload\n\n\nBuy at asset store",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "MoonBehavior is a simple but powerfult  BehaviorTree  System \nfor  Unity3d  game engine.  it enables you to create:   better AI's in less time.  Reuse and secured logic.   And much more.",
            "title": "Welcome"
        },
        {
            "location": "/#download",
            "text": "Feature  Free  Paid      All plataforms  Desktop only  Yes    Realtime debugger  No  Yes    Source code  No  Yes    Commercial use  Yes  Yes    Download  Download  Buy at asset store",
            "title": "Download"
        },
        {
            "location": "/getting-started/",
            "text": "Creating BehaviorTree Graph\n\n\nBehavior tree graphs are the 'Proyect' where you edit the logic of your Behavior trees.\n\n\nTo Create a Behavior tree graph, Open the Behvaior editor located on \"Window/MoonBehavior/BehaviorEditor\"\n\n\nClick on \"New Graph\". \n\n\n\n\nA window will display, put the name and hit \"Ok\".\n\n\n\n\nAdding nodes\n\n\nRight click > \"Add node\" to display the node list\n\n\n\n\nTo add a node just click on the (+) Icon of the selected node.\n\n\n\n\nSearch filter:\n You can Search by name or by category (the blue label) and also you can filter the type (Actions or Decisions)\n\n\n\n\nMoving nodes\n\n\nYou can move nodes holding left click ..\n\n\n\n\nRecursive move holding Shift + left click.\n\n\n\n\nConnecting nodes\n\n\nTo connect a node to other just hold the cursor from the output of source node to the input of target node and release it.\n\n\n\n\nThe node output don't care if it's already connected; if it's connected it will remove the connection automatically.\n\n\nTo un-connect a node just hold the connection from the input and remove it from the input area. \n\n\nExporting data\n\n\nTo export the BehaviorTrees to use in your game you need to click 'Export BehaviorTree' on the BehaviorEditor window every time you made changes.\n\n\n\n\nBehavior Tree Examples\n\n\nExamples are aviable at \nThis\n repository",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#creating-behaviortree-graph",
            "text": "Behavior tree graphs are the 'Proyect' where you edit the logic of your Behavior trees.  To Create a Behavior tree graph, Open the Behvaior editor located on \"Window/MoonBehavior/BehaviorEditor\"  Click on \"New Graph\".    A window will display, put the name and hit \"Ok\".",
            "title": "Creating BehaviorTree Graph"
        },
        {
            "location": "/getting-started/#adding-nodes",
            "text": "Right click > \"Add node\" to display the node list   To add a node just click on the (+) Icon of the selected node.   Search filter:  You can Search by name or by category (the blue label) and also you can filter the type (Actions or Decisions)",
            "title": "Adding nodes"
        },
        {
            "location": "/getting-started/#moving-nodes",
            "text": "You can move nodes holding left click ..   Recursive move holding Shift + left click.",
            "title": "Moving nodes"
        },
        {
            "location": "/getting-started/#connecting-nodes",
            "text": "To connect a node to other just hold the cursor from the output of source node to the input of target node and release it.   The node output don't care if it's already connected; if it's connected it will remove the connection automatically.  To un-connect a node just hold the connection from the input and remove it from the input area.",
            "title": "Connecting nodes"
        },
        {
            "location": "/getting-started/#exporting-data",
            "text": "To export the BehaviorTrees to use in your game you need to click 'Export BehaviorTree' on the BehaviorEditor window every time you made changes.",
            "title": "Exporting data"
        },
        {
            "location": "/getting-started/#behavior-tree-examples",
            "text": "Examples are aviable at  This  repository",
            "title": "Behavior Tree Examples"
        },
        {
            "location": "/node-types/",
            "text": "MoonBehavior Comes with a lot of default build-in nodes that you can use.\n\n\nIn this page will explain the functionality of basic nodes.\n\n\nSequencer\n\n\n\n\nSequencer like his name says executes sequencially every task by order from minor to mayor.\n\n\nReturns SUCCESS when all tasks are successed, FAIL when any task fails, otherwise it will return RUNNING.\n\n\nIt's good for sequencial events.\n\n\n\n\nSelector\n\n\n\n\nSelector Executes task sequencially (like sequencer) but it will not pass to the next task until the current task fails.\n\n\nReturns SUCCESS if the current task are successed , RUNNING if the current task are running , and FAILURE if all the childs tasks fails or it has no childs.\n\n\nOptions\n\n\n\n\nRandomize:\n If enabled it will sort and executes the childs Ramdomly.\n\n\n\n\nIt's good for IF-ELSE Sequences\n\n\n\n\nRandom Selector\n\n\n\n\nRandom selector\n\n\nWorks like selector but select it's childs based on the priority of every child node, mayor priority means more selection probability. \n\n\nRepeater\n\n\n\n\nRepeats a child Task every tick.\n\n\nOptions\n\n\n\n\nRepeat until:\n Repeat mode: SUCCESS; Repeats until the child node returns Success, FAILURE; Repeats until the child node retunrs Failure, \nFOREVER; Repeats forever.\n\n\n\n\nReturns Success When the repeat condition fails, otherwise returns running\n\n\nit's good for continuos executions.\n\n\n\n\nIterator\n\n\n\n\nRepeats a child task every tick (like Repeater) but with a limited repeat count.\n\n\nOptions\n\n\n\n\nRepeat count:\n Maximun child repetitions.\n\n\n\n\nReturns SUCCESS when repetitions are finished, otherwise returns RUNNING.\n\n\nParallel\n\n\n\n\nExecutes all childs simultaneously every tick\n\n\nReturns RUNNING.\n\n\nInverter\n\n\n\n\nLike ! Operator Returns the inverter the result of it's child Task.\n\n\nSUCCESS becomes FAILURE\n\n\nFAILURE becomes SUCCESS.",
            "title": "Node Types"
        },
        {
            "location": "/node-types/#sequencer",
            "text": "Sequencer like his name says executes sequencially every task by order from minor to mayor.  Returns SUCCESS when all tasks are successed, FAIL when any task fails, otherwise it will return RUNNING.  It's good for sequencial events.",
            "title": "Sequencer"
        },
        {
            "location": "/node-types/#selector",
            "text": "Selector Executes task sequencially (like sequencer) but it will not pass to the next task until the current task fails.  Returns SUCCESS if the current task are successed , RUNNING if the current task are running , and FAILURE if all the childs tasks fails or it has no childs.  Options   Randomize:  If enabled it will sort and executes the childs Ramdomly.   It's good for IF-ELSE Sequences",
            "title": "Selector"
        },
        {
            "location": "/node-types/#random-selector",
            "text": "Random selector  Works like selector but select it's childs based on the priority of every child node, mayor priority means more selection probability.",
            "title": "Random Selector"
        },
        {
            "location": "/node-types/#repeater",
            "text": "Repeats a child Task every tick.  Options   Repeat until:  Repeat mode: SUCCESS; Repeats until the child node returns Success, FAILURE; Repeats until the child node retunrs Failure, \nFOREVER; Repeats forever.   Returns Success When the repeat condition fails, otherwise returns running  it's good for continuos executions.",
            "title": "Repeater"
        },
        {
            "location": "/node-types/#iterator",
            "text": "Repeats a child task every tick (like Repeater) but with a limited repeat count.  Options   Repeat count:  Maximun child repetitions.   Returns SUCCESS when repetitions are finished, otherwise returns RUNNING.",
            "title": "Iterator"
        },
        {
            "location": "/node-types/#parallel",
            "text": "Executes all childs simultaneously every tick  Returns RUNNING.",
            "title": "Parallel"
        },
        {
            "location": "/node-types/#inverter",
            "text": "Like ! Operator Returns the inverter the result of it's child Task.  SUCCESS becomes FAILURE  FAILURE becomes SUCCESS.",
            "title": "Inverter"
        },
        {
            "location": "/using-memory/",
            "text": "AI memory allows you to store some information between the graph nodes and The AI GameObject.\n\n\nThe AI memory stores every element as object type that means that you can store on the memory almost every data type (via code).\n\n\nAdding elements\n\n\nAdd element to memory list:\n\n\n\n\nModify the content: \n\n\n\n\nUsing code:\n\n\nusing MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.SetItem(\"Label\" , value);\n    }\n}\n\n\n\n\nRemoving elements\n\n\nTo remove elements in the inspector it's just clicking on the (-) buttun and it will remove the selected item.\n\n\nUsing Code:\n\n\nusing MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.Remove(\"Label\");\n    }\n}\n\n\n\n\nGet values\n\n\nSimple item:\n\n\nusing MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        float a =  ai.Memory.GetValue<float>(\"Label\");\n    }\n}\n\n\n\n\nMemoryItem:\n\n\nAllows support of constant and memory-based values of different data types (NOTE: it doesn't support array.) that gets value automatically.\n\n\n\n\nOnly works on \nCustom Nodes\n\n\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions\n{\n    [Action]\n    public class MyAction : Task\n    {\n\n        [Display]\n        public MemoryItem Item = new MemoryItem(MemoryItem.ItemType.FLOAT);\n\n        // OnExecute is called when the action are executed\n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            Debug.Log(Item.GetValue<float>(ai));\n            return TaskResult.Success; \n        }\n    }\n}\n\n\n\n\n\nClear Memory\n\n\nTo clear the memory Simply call The \nClear()\n Method\n\n\n\n\nIt will kill all the AI memory, so be careful about destroying the memory data.\n\n\n\n\nusing UnityEngine;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai; \n\n    private void Start()\n    {\n        ai.Memory.Clear();\n    }\n}\n\n\n\n\nSave & Load\n\n\nSaving and loading data allows you to keep in HDD / RAM the AI's Memory.\n\n\nIt will return an byte array and you can save it later to a file and loaing it again.\n\n\n\n\nNote:\n the serialization and des-serialization can be \nslow\n because it encrypts and decrypts the information to return safe data.\n\n\nDoesn't support unity-derived (UnityEngine.Object) data types because it's not safe at serialization.\n\n\n\n\nSaving\n\n\nTo save from memory call : Save(string password) \n\n\n\n\nPassword: password use as key to encrypt the Memory. You must keep it, it will be used on loading. \n\n\n\n\nExample saving data:\n\n\n\nusing UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\nusing System.IO;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void  Start()\n    {\n        // Push some data to the AI memory\n        for (int i = 0; i < 10; i++)\n        {\n            ai.Memory.SetValue(i.ToString(), Random.Range(-1000, 1000));\n        }\n        // Saves the data with the password: 123\n        byte[] dataf = ai.Memory.Save(\"123\");\n        // Saves the data to the \"Assets\" folder of your proyect just as example saving to file.\n        File.WriteAllBytes(Application.dataPath + \"/test.txt\", dataf); \n    }\n}\n\n\n\n\nLoading\n\n\nTo load from memory call : Load(byte[] Data , string password)\n\n\n\n\nData: byte array of the previusly saved data.\n\n\nPassword: Password linked with the saved data.\n\n\n\n\nExample loading data:\n\n\nusing UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n\n    public TextAsset preload;\n\n    private void  Start()\n    {\n        if (preload != null)\n        {\n            ai.Memory.Load(preload.bytes, \"123\");\n        }\n    }\n}",
            "title": "Using Memory"
        },
        {
            "location": "/using-memory/#adding-elements",
            "text": "Add element to memory list:   Modify the content:    Using code:  using MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.SetItem(\"Label\" , value);\n    }\n}",
            "title": "Adding elements"
        },
        {
            "location": "/using-memory/#removing-elements",
            "text": "To remove elements in the inspector it's just clicking on the (-) buttun and it will remove the selected item.  Using Code:  using MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        ai.Memory.Remove(\"Label\");\n    }\n}",
            "title": "Removing elements"
        },
        {
            "location": "/using-memory/#get-values",
            "text": "Simple item:  using MoonBehavior;\nusing UnityEngine;\n\npublic class ExampleScript : MonoBehavior \n{\n    public MoonAI ai;\n\n    void Start()\n    {\n        float a =  ai.Memory.GetValue<float>(\"Label\");\n    }\n}  MemoryItem:  Allows support of constant and memory-based values of different data types (NOTE: it doesn't support array.) that gets value automatically.   Only works on  Custom Nodes   \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions\n{\n    [Action]\n    public class MyAction : Task\n    {\n\n        [Display]\n        public MemoryItem Item = new MemoryItem(MemoryItem.ItemType.FLOAT);\n\n        // OnExecute is called when the action are executed\n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            Debug.Log(Item.GetValue<float>(ai));\n            return TaskResult.Success; \n        }\n    }\n}",
            "title": "Get values"
        },
        {
            "location": "/using-memory/#clear-memory",
            "text": "To clear the memory Simply call The  Clear()  Method   It will kill all the AI memory, so be careful about destroying the memory data.   using UnityEngine;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai; \n\n    private void Start()\n    {\n        ai.Memory.Clear();\n    }\n}",
            "title": "Clear Memory"
        },
        {
            "location": "/using-memory/#save-load",
            "text": "Saving and loading data allows you to keep in HDD / RAM the AI's Memory.  It will return an byte array and you can save it later to a file and loaing it again.   Note:  the serialization and des-serialization can be  slow  because it encrypts and decrypts the information to return safe data.  Doesn't support unity-derived (UnityEngine.Object) data types because it's not safe at serialization.   Saving  To save from memory call : Save(string password)    Password: password use as key to encrypt the Memory. You must keep it, it will be used on loading.    Example saving data:  \nusing UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\nusing System.IO;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n    private void  Start()\n    {\n        // Push some data to the AI memory\n        for (int i = 0; i < 10; i++)\n        {\n            ai.Memory.SetValue(i.ToString(), Random.Range(-1000, 1000));\n        }\n        // Saves the data with the password: 123\n        byte[] dataf = ai.Memory.Save(\"123\");\n        // Saves the data to the \"Assets\" folder of your proyect just as example saving to file.\n        File.WriteAllBytes(Application.dataPath + \"/test.txt\", dataf); \n    }\n}  Loading  To load from memory call : Load(byte[] Data , string password)   Data: byte array of the previusly saved data.  Password: Password linked with the saved data.   Example loading data:  using UnityEngine;\nusing System.Collections;\nusing MoonBehavior;\n\npublic class ExampleScript : MonoBehaviour\n{\n    public MoonAI ai;\n\n    public TextAsset preload;\n\n    private void  Start()\n    {\n        if (preload != null)\n        {\n            ai.Memory.Load(preload.bytes, \"123\");\n        }\n    }\n}",
            "title": "Save &amp; Load"
        },
        {
            "location": "/custom-nodes/",
            "text": "Custom Tasks allows you to put custom events and logic , interacting with you game code and much more.\n\n\nCreating a custom node\n\n\n1- On your behavior tree go to the right corner and hit 'Create action' \n\n\n\n\n2- Set the name and select the type, then hit 'Create'\n\n\n\n\n3- Then your script editor should open the file\n\n\n\n\nThe files are default saved to:\n Assets/MoonBehavior/Actions/\n\n\n\n\nActions\n\n\nCustom actions are actions that the AI executes. ( eg: Move , Destroying , Animating..)\n\n\nthe default layout for a custom action are:\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions\n{\n    [Action]\n    public class MyAction : Task\n    {\n        // OnExecute is called when the action are executed\n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            return TaskResult.Success; \n        }\n    }\n}\n\n\n\n\n\nYou must return an state (FAILURE , SUCCESS , RUNNING ) depending on what you are doing..\n\n\nThe Action Class must be marked with [Action] attribute and the class must derived from 'Task'. \n\n\nDecisions\n\n\nDecisions are an Action type but it are made to execute Tasks as childs.\n\n\nthe default layout for custom decision are:\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions.Decisions\n{\n    [Action]\n    public class MyDecision : Decision\n    {\n        // Decisions are the tasks that executes child tasks \n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            for (int i = 0; i < Childs.Length; i++)\n            {\n                // To call an child task you must  use Execute() Instead of OnExecute()\n                TaskResult status = Childs[i].Execute(ai);\n\n                if (status == TaskResult.Failure)\n                {\n                    return status;\n                }\n            }\n            return TaskResult.Success;\n        }\n    }\n}\n\n\n\n\n\nThe Decisions Classes must be marked with [Action] attribute too and the class must derived from 'Decision'.\n\n\nDisplaying Elements\n\n\nTo display elements on the Node Inspector every field must be marked with [Display] Atributte.\n\n\nif the field are private it must be marked with [SerializeField] too. \n\n\ncode example:\n\n\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions\n{\n    [Action]\n    public class MyAction : Task\n    {\n\n        [Display]\n        public float MyFloat; \n\n        // OnExecute is called when the action are executed\n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            Debug.Log(myFloat);\n            return TaskResult.Success; \n        }\n    }\n}\n\n\n\n\n\nit will display 'Myfloat' in the node inspector when you select it. \n\n\nAditional Options\n\n\nAction Attributte:\n\n\n\n\nCategory: The category for this task. \n\n\nName: An override of the name for this task.\n\n\n\n\nboth options takes effect on the nodelist.\n\n\nTask:\n\n\n\n\nOnEnter(MoonAI ai): called when start executing a Task. \n\n\nOnExit(MoonAI ai): Called when a task returns SUCCESS or FAILURE.\n\n\n\n\nDecision\n\n\n\n\nSingleChild (Property) : Should this decision contains only one Child ?",
            "title": "Creating custom nodes"
        },
        {
            "location": "/custom-nodes/#creating-a-custom-node",
            "text": "1- On your behavior tree go to the right corner and hit 'Create action'    2- Set the name and select the type, then hit 'Create'   3- Then your script editor should open the file   The files are default saved to:  Assets/MoonBehavior/Actions/",
            "title": "Creating a custom node"
        },
        {
            "location": "/custom-nodes/#actions",
            "text": "Custom actions are actions that the AI executes. ( eg: Move , Destroying , Animating..)  the default layout for a custom action are:  \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions\n{\n    [Action]\n    public class MyAction : Task\n    {\n        // OnExecute is called when the action are executed\n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            return TaskResult.Success; \n        }\n    }\n}  You must return an state (FAILURE , SUCCESS , RUNNING ) depending on what you are doing..  The Action Class must be marked with [Action] attribute and the class must derived from 'Task'.",
            "title": "Actions"
        },
        {
            "location": "/custom-nodes/#decisions",
            "text": "Decisions are an Action type but it are made to execute Tasks as childs.  the default layout for custom decision are:  \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions.Decisions\n{\n    [Action]\n    public class MyDecision : Decision\n    {\n        // Decisions are the tasks that executes child tasks \n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            for (int i = 0; i < Childs.Length; i++)\n            {\n                // To call an child task you must  use Execute() Instead of OnExecute()\n                TaskResult status = Childs[i].Execute(ai);\n\n                if (status == TaskResult.Failure)\n                {\n                    return status;\n                }\n            }\n            return TaskResult.Success;\n        }\n    }\n}  The Decisions Classes must be marked with [Action] attribute too and the class must derived from 'Decision'.",
            "title": "Decisions"
        },
        {
            "location": "/custom-nodes/#displaying-elements",
            "text": "To display elements on the Node Inspector every field must be marked with [Display] Atributte.  if the field are private it must be marked with [SerializeField] too.   code example:  \nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing MoonBehavior.Memory;\nusing MoonBehavior.Core;\n\nnamespace MoonBehavior.Actions\n{\n    [Action]\n    public class MyAction : Task\n    {\n\n        [Display]\n        public float MyFloat; \n\n        // OnExecute is called when the action are executed\n        public override TaskResult OnExecute(MoonAI ai)\n        {\n            Debug.Log(myFloat);\n            return TaskResult.Success; \n        }\n    }\n}  it will display 'Myfloat' in the node inspector when you select it.",
            "title": "Displaying Elements"
        },
        {
            "location": "/custom-nodes/#aditional-options",
            "text": "Action Attributte:   Category: The category for this task.   Name: An override of the name for this task.   both options takes effect on the nodelist.  Task:   OnEnter(MoonAI ai): called when start executing a Task.   OnExit(MoonAI ai): Called when a task returns SUCCESS or FAILURE.   Decision   SingleChild (Property) : Should this decision contains only one Child ?",
            "title": "Aditional Options"
        }
    ]
}